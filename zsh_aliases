if [ `uname` = "Darwin" ];then
    alias edit='open -a "Visual Studio Code"'
    alias gkr='open -a "GitKraken"'
elif [ `uname` = "Linux" ];then
    alias edit='code'
fi

TXTRED=$(tput setaf 1) # Red
TXTGRN=$(tput setaf 2) # Green
TXTRST=$(tput sgr0) # Text reset.

#file system
alias rm='trash'
alias mkdir='mkdir -p'
alias latr='ls -latr'
alias ltr='ls -ltr'

#shell updates
alias ec='edit ~/.zshrc'
alias sc='source ~/.zshrc'
alias vc='cat ~/.zshrc'
alias ea='edit ~/.zsh_aliases'
alias va='cat ~/.zsh_aliases'
#http://zsh.sourceforge.net/FAQ/zshfaq03.html
alias ssplit='setopt shwordsplit'
alias usplit='unsetopt shwordsplit'

#opendds
alias sd='source ~/OpenDDS/setenv.sh'
alias envd='env|grep DDS'

#ros2
alias rbil='rm -rf build install log'
alias rbi='rm -rf build install'
alias sros2='source /opt/ros/eloquent/setup.zsh'

#docker
alias dps='docker ps -a'
alias dr='docker run -it --rm'
alias de='docker exec -it'
alias di='docker images'
alias dst='docker stop'
alias drm='docker rm'
alias drmi='docker rmi'

ignore()
{
    file_path="."
    command="echo"
    while getopts ":p:ra" opt; do
    case ${opt} in
        p ) 
            file_path=$OPTARG
        ;;
        r )
            command="rm" 
        ;;
        a )
            command="touch" 
        ;;
        \? ) echo "options: [-p] path/to/start [-r] (remove ignore files) [-a] (add ignore files)"
        return
        ;;
    esac
    done


    for x in $(find $file_path -name "CMakeLists.txt"); do
        ignore_path=$(dirname $x)
        $command $ignore_path/COLCON_IGNORE
        $command $ignore_path/AMENT_IGNORE
    done
}

add_ignore()
{
    ignore -a $@
}

rm_ignore()
{
    ignore -r $@
}   

find_ignore()
{
    find . -name "*IGNORE"
}

#findcpp2()
#{
#	path="."
#	if [ "$1" != "" ];then
#	     path=$1
#	fi
#	find $path -type f -name "*.cpp" -o -name "*.c" -o -name "*.hpp" -o -name "*.h"
#}
alias findcpp='find . -type f -name "*.cpp" -o -name "*.c" -o -name "*.hpp" -o -name "*.h"'
alias findcmake='find . -type f -name "CMakeLists.txt" -o -name "*.cmake*"'
alias findsyml='ls -lR . | grep ^l'
alias findgit='find . -name ".git"'
alias findpack='find . -name "package.xml"'

all_git_repos()
{
    gitcommand=""
    while getopts ":sp" opt; do
    case ${opt} in 
        s )
            gitcommand="status -s"
        ;;
        p )
            gitcommand="remote -v"
        ;;
        \? )
            echo "options: [-s] (status) [-p] (paths)"
            return
        ;;
    esac
    done

    for x in $(findgit); do
        pushd $(dirname $x) &>/dev/null
        echo -e "${TXTGRN}$(basename $(dirname $x))${TXTRST}"
        git $(echo $gitcommand)
        popd &>/dev/null
    done

}

#https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
hg()
{
#    echo $@
    if [ "$@" = "paths" ]; then
        git remote -v
    elif [ "$@" = "status" ]; then
        git status
    elif [ "$@" = "push" ]; then
        git push
    elif [ "$@" = "pull" ]; then
        git fetch
    elif [ "$@" = "revert -a" ]; then
        git reset --hard
    elif [ "$@" = "revert" ]; then
        git reset
    elif [ "$@" = "update" ]; then
        git checkout
    elif [ "$@" = "branches" ]; then
        git branch -a
    elif [ "$@" = "branch" ]; then
        git rev-parse --abbrev-ref HEAD
    elif [ "$@" = "backout" ]; then
        git revert
    elif [ "$@" = "summary" ]; then
	git show -s
    elif [ "$@" = "id" ]; then
	git describe --abbrev=12 --always --dirty=+
    elif [ "$@" = "id2" ]; then
	git rev-parse HEAD
    fi
}

printlines()
{
    if [ $# -ne 3 ];then
        echo "usage: printlines firstline secondline filename"
        return
    fi
    sed -n "${1},${2}p" $3
} 

printline()
{
    if [ $# -ne 2 ];then
        echo "usage: printline linenum filename"
        return
    fi
    printlines $1 $1 $2
}
