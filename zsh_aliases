if [ `uname` = "Darwin" ];then
    alias edit='open -a "Visual Studio Code"'
    alias gitkr='/Applications/GitKraken.app/Contents/MacOS/GitKraken'
    gitkr_open()
    {
        if [ $# -ne 1 ];then
            echo "usage: gitkr_open /path/to/git/repo"
            return
        fi
        /Applications/GitKraken.app/Contents/MacOS/GitKraken -p $1 &
    }
elif [ `uname` = "Linux" ];then
    alias edit='code'
fi

TXTRED=$(tput setaf 1) # Red
TXTGRN=$(tput setaf 2) # Green
TXTRST=$(tput sgr0) # Text reset.

#reset built-in commands
alias cat='bat'
alias rm='trash'
alias mkdir='mkdir -p'
alias less='less -N'
alias grep='grep -n --color=always'
alias tail='tail -f'

#file system
alias latr='ls -latr'
alias ltr='ls -ltr'

#shell updates
alias ec='edit ~/.zshrc'
alias sc='source ~/.zshrc'
alias vc='cat ~/.zshrc'
alias ea='edit ~/.zsh_aliases'
alias va='cat ~/.zsh_aliases'
#http://zsh.sourceforge.net/FAQ/zshfaq03.html
alias ssplit='setopt shwordsplit'
alias usplit='unsetopt shwordsplit'

#opendds
#TODO find setenv.sh under current location
alias sd='source ~/OpenDDS/setenv.sh'
alias envd='env|grep DDS'
alias makeddslog='make &>make.log'
alias makealldds='echo "MAKE DEPEND";make depend; echo "MAKE";make'
alias makeallddslog='echo "MAKE DEPEND" > makeall.log;make depend &>> makeall.log; echo "MAKE" >> makeall.log;make &>>makeall.log'
alias makedds_idl='make opendds_idl && make -t && touch tests/DCPS/Compiler/anonymous_types/classic/testTypeSupport.idl && make'
alias mpc='mpc.pl'
alias dds_add_tests='cp GNUmakefile GNUmakefile.orig && mpc DDS.mwc && mv GNUmakefile GNUmakefile.dist && cp GNUmakefile.orig GNUmakefile'

#ros2
alias rbil='rm -rf build;rm -rf log; rm -rf install*'
alias rbi='rm -rf build; rm -rf install*'
alias sros2='source /opt/ros/eloquent/setup.zsh'
alias getrepos='vcs import src <'

#docker
alias dps='docker ps -a'
alias dr='docker run -it --rm'
alias de='docker exec -it'
alias di='docker images'
alias dst='docker stop'
alias drm='docker rm'
alias drmi='docker rmi'
alias dpwd="docker inspect -f '{{ .Mounts}}'"
alias dinu='docker rmi $(docker images -f "dangling=true" -q)'

ignore()
{
    file_path="."
    command="echo"
    while getopts ":p:ra" opt; do
    case ${opt} in
        p )
            file_path=$OPTARG
        ;;
        r )
            command="rm"
        ;;
        a )
            command="touch"
        ;;
        \? ) echo "options: [-p] path/to/start [-r] (remove ignore files) [-a] (add ignore files)"
        return
        ;;
    esac
    done


    for x in $(find $file_path -name "CMakeLists.txt"); do
        ignore_path=$(dirname $x)
        $command $ignore_path/COLCON_IGNORE
        $command $ignore_path/AMENT_IGNORE
    done
}

addignore()
{
    ignore -a $@
}

rmignore()
{
    ignore -r $@
}

findignore()
{
    find . -name "*IGNORE"
}

lle()
{
    # set -x
    # echo "#="$#
    if [ $# -lt 1 ];then
        echo "usage: lle [dir] first_ext second_ext ..."
        echo "ex: lle cpp hpp h c"
        echo "ex: lle . cpp hpp h c"
        return
    fi

    directory="."
    argcount=$#
    if [ -d $1 ];then
        echo $1" is a dir"
        directory=$1
        argcount="$(($argcount-1))"
        set -- "${@:2}"
    fi

    find_list=$directory"/**/*."
    count=1
    # echo "count="$count
    # echo "arcount="$argcount
    for var in "$@"
    do
        # echo "$var"
        #if one or last one
        if [ $argcount -eq $count ];then
            find_list=$find_list$var
        #if more than one
        else
            find_list=$find_list$var" "$directory"/**/*."
        fi
        count="$(($count+1))"

    done

	eval ll  $find_list
}

alias findcpp='lle cpp c hpp h|sort'
alias findcmake='find . -type f -name "CMakeLists.txt" -o -name "*.cmake*"|sort'
alias findsyml='ls -lR . | grep ^l'
alias findgit='find . -name ".git"|sort'
alias findpack='find . -name "package.xml"|sort'

#https://stackoverflow.com/questions/48341920/git-branch-command-behaves-like-less
git config --global pager.branch false
git config --global pager.show false
alias gcleani='git clean -ifdx'
alias gitaliases='alias|grep git|less'
all_git_repos()
{
    gitcommand=""
    pipe=""
    while getopts ":spbBSH" opt; do
    case ${opt} in
        s )
            gitcommand="status -s"
        ;;
        p )
            gitcommand="remote -v"
        ;;
        b )
            gitcommand="branch -a"
        ;;
        B )
            gitcommand="branch -a"
            pipe="|grep \*"
        ;;
        S )
            gitcommand="show -s"
        ;;
        H )
            gitcommand="show -s"
            pipe="|grep -B 1 commit"
        ;;
        r )
            gitcommand="log --reverse --oneline"
        ;;
        ? )
            echo "options: [-s] (status) [-p] (paths) [-b] (branches) [-B] (current branch) [-S] (show) [-H] (show hashes) [-r] (log reverse)"
            return
        ;;
    esac
    done

    for x in $(findgit); do
        pushd $(dirname $x) &>/dev/null
        echo -e "${TXTGRN}$(basename $(dirname $x))${TXTRST}"
        eval git $gitcommand$pipe
        popd &>/dev/null
    done

}

#https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
hg()
{
#    echo $@
    if [ "$@" = "paths" ]; then
        echo "git remote -v"
        git remote -v
    elif [ "$@" = "status" ]; then
        echo "git status"
        git status
    elif [ "$@" = "push" ]; then
        echo "git push"
        git push
    elif [ "$@" = "pull" ]; then
        echo "git fetch"
        git fetch
    elif [ "$@" = "revert -a" ]; then
        echo "git reset --hard"
        git reset --hard
    elif [ "$@" = "revert" ]; then
        echo "git reset"
        git reset
    elif [ "$@" = "update" ]; then
        echo "git checkout"
        git checkout
    elif [ "$@" = "branches" ]; then
        echo "git branch -a"
        git branch -a
    elif [ "$@" = "branch" ]; then
        echo "git rev-parse --abbrev-ref HEAD"
        git rev-parse --abbrev-ref HEAD
    elif [ "$@" = "backout" ]; then
        echo "git revert"
        git revert
    elif [ "$@" = "summary" ]; then
        echo "git show -s"
        git show -s
    elif [ "$@" = "id" ]; then
    	echo "git describe --abbrev=12 --always --dirty=+"
    	git describe --abbrev=12 --always --dirty=+
    elif [ "$@" = "id2" ]; then
	    echo "git rev-parse HEAD"
	    git rev-parse HEAD
    fi
}

printlines()
{
    if [ $# -ne 3 ];then
        echo "usage: printlines firstline secondline filename"
        return
    fi
    sed -n "${1},${2}p" $3
}

printline()
{
    if [ $# -ne 2 ];then
        echo "usage: printline linenum filename"
        return
    fi
    printlines $1 $1 $2
}
