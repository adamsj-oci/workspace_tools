if [ `uname` = "Darwin" ];then
    alias edit='open -a "Visual Studio Code"'
elif [ `uname` = "Linux" ];then
    alias edit='code'
fi

alias rm='trash'

alias latr='ls -latr'
alias ltr='ls -ltr'

alias ec='edit ~/.zshrc'
alias sc='source ~/.zshrc'
alias vc='cat ~/.zshrc'

alias sd='source ~/OpenDDS/setenv.sh'
alias envd='env|grep DDS'

alias ea='edit ~/.zsh_aliases'
alias va='cat ~/.zsh_aliases'

alias mkdir='mkdir -p'

alias rbil='rm -rf build install log'

ignore()
{
    file_path="."
    command="echo"
    while getopts ":p:ra" opt; do
    case ${opt} in
        p ) 
            file_path=$OPTARG
        ;;
        r )
            command="rm" 
        ;;
        a )
            command="touch" 
        ;;
        \? ) echo "options: [-p] path/to/start [-r] (remove ignore files) [-a] (add ignore files)"
        return
        ;;
    esac
    done


    for x in $(find $file_path -name "CMakeLists.txt"); do
        ignore_path=$(dirname $x)
        $command $ignore_path/COLCON_IGNORE
        $command $ignore_path/AMENT_IGNORE
    done
}

add_ignore()
{
    ignore -a $@
}

rm_ignore()
{
    ignore -r $@
}   

find_ignore()
{
    find . -name "*IGNORE"
}

#findcpp2()
#{
#	path="."
#	if [ "$1" != "" ];then
#	     path=$1
#	fi
#	find $path -type f -name "*.cpp" -o -name "*.c" -o -name "*.hpp" -o -name "*.h"
#}
alias findcpp='find . -type f -name "*.cpp" -o -name "*.c" -o -name "*.hpp" -o -name "*.h"'
alias findcmake='find . -type f -name "CMakeLists.txt" -o -name "*.cmake*"'

#https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
hg()
{
#    echo $@
    if [ "$@" = "paths" ]; then
        git remote -v
    elif [ "$@" = "status" ]; then
        git status
    elif [ "$@" = "push" ]; then
        git push
    elif [ "$@" = "pull" ]; then
        git fetch
    elif [ "$@" = "revert -a" ]; then
        git reset --hard
    elif [ "$@" = "revert" ]; then
        git reset
    elif [ "$@" = "update" ]; then
        git checkout
    elif [ "$@" = "branches" ]; then
        git branch -a
    elif [ "$@" = "branch" ]; then
        git rev-parse --abbrev-ref HEAD
    elif [ "$@" = "backout" ]; then
        git revert
    elif [ "$@" = "summary" ]; then
	git show -s
    elif [ "$@" = "id" ]; then
	git describe --abbrev=12 --always --dirty=+
    elif [ "$@" = "id2" ]; then
	git rev-parse HEAD
    fi
}

alias hw='echo hello world'
 
